(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return m}));var i=n(2),a=n(6),o=(n(0),n(100)),r=["components"],l={id:"ex8",title:"Day 8 In-class Exercise"},c={unversionedId:"exercises/ex8",id:"exercises/ex8",isDocsHomePage:!1,title:"Day 8 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester.",source:"@site/docs\\exercises\\ex8.md",slug:"/exercises/ex8",permalink:"/cs220-summer21/docs/exercises/ex8",version:"current"},b=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - Linked Lists",id:"part-1---linked-lists",children:[]},{value:"Part 2 - Gradescope submission",id:"part-2---gradescope-submission",children:[]}]}],s={rightToc:b};function m(e){var t=e.components,n=Object(a.a)(e,r);return Object(o.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester. "))),Object(o.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(o.b)("div",{className:"admonition admonition-success alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This exercise will help you gain additional familiarity with:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"Linked lists"),Object(o.b)("li",{parentName:"ul"},"Dynamic memory allocation"),Object(o.b)("li",{parentName:"ul"},"Pointers, pointers, and more pointers"),Object(o.b)("li",{parentName:"ul"},"Recursion"),Object(o.b)("li",{parentName:"ul"},"Implementing ",Object(o.b)("inlineCode",{parentName:"li"},"length"),", ",Object(o.b)("inlineCode",{parentName:"li"},"add_after"),", and ",Object(o.b)("inlineCode",{parentName:"li"},"reverse_print")," functions"),Object(o.b)("li",{parentName:"ul"},"Implementing deletion from a (singly) linked list, and insertion into a sorted version of a linked list")))),Object(o.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(o.b)("p",null,"Get the starter codes from ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(o.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(o.b)("inlineCode",{parentName:"p"},"ex8")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(o.b)("inlineCode",{parentName:"p"},"list.c"),", ",Object(o.b)("inlineCode",{parentName:"p"},"list.h"),", ",Object(o.b)("inlineCode",{parentName:"p"},"main.c"),", and a ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),"."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(o.b)("h3",{id:"part-1---linked-lists"},"Part 1 - Linked Lists"),Object(o.b)("h4",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"In this exercise, you will implement the data structure linked list and the necessary functionality. The function prototypes are provided for you in ",Object(o.b)("inlineCode",{parentName:"p"},"list.h"),". Follow the instructions below to implement and test them one by one."),Object(o.b)("h4",{id:"instructions"},"Instructions"),Object(o.b)("h5",{id:"length"},Object(o.b)("inlineCode",{parentName:"h5"},"length")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"length")," function. The function is passed a pointer to the head node of a linked list, and returns an integer indicating how many values are stored in the linked list.  (Equivalently, it returns a count of the number of nodes in the linked list, since each node stores one element.) ")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the assertion in ",Object(o.b)("em",{parentName:"p"},"main.c")," which tests length on a linked list."))),Object(o.b)("h5",{id:"add_after"},Object(o.b)("inlineCode",{parentName:"h5"},"add_after")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"add_after")," function.  It takes a pointer to a ",Object(o.b)("inlineCode",{parentName:"p"},"Node")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"char")," value as parameters and should insert a new node with the corresponding ",Object(o.b)("inlineCode",{parentName:"p"},"char")," value, after the node passed as the parameter.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the assertions and call to print in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test ",Object(o.b)("inlineCode",{parentName:"p"},"add_after")," on a linked list."))),Object(o.b)("h5",{id:"print_rec"},Object(o.b)("inlineCode",{parentName:"h5"},"print_rec")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"print_rec")," function.  It is like the ",Object(o.b)("inlineCode",{parentName:"p"},"print_list")," function, except that it uses recursion to print the values.  This one will require some (recursive) thought!")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Replace the call to ",Object(o.b)("inlineCode",{parentName:"p"},"print_list")," with ",Object(o.b)("inlineCode",{parentName:"p"},"print_rec")," in line 51 (in the ",Object(o.b)("inlineCode",{parentName:"p"},"add_after")," test code) of ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation."))),Object(o.b)("h5",{id:"reverse_print"},Object(o.b)("inlineCode",{parentName:"h5"},"reverse_print")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"reverse_print")," function.  It is like the ",Object(o.b)("inlineCode",{parentName:"p"},"print_list")," function, except that it prints the values in reverse order.  This one will require some (recursive) thought also!")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the call to ",Object(o.b)("inlineCode",{parentName:"p"},"reverse_print")," in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation."))),Object(o.b)("h5",{id:"clear_list"},Object(o.b)("inlineCode",{parentName:"h5"},"clear_list")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"clear_list")," function. It releases all allocated memory in the list. It takes a pointer to the pointer variable that points to the head node of a linked list.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Compile and run the program with valgrind to confirm there is no memory problem."))),Object(o.b)("h5",{id:"add_front"},Object(o.b)("inlineCode",{parentName:"h5"},"add_front")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"add_front")," function. Different from ",Object(o.b)("inlineCode",{parentName:"p"},"add_after"),", it takes a pointer to the pointer variable that points to the head node of a linked list, and should insert a new node with the input data to the front of the linked list.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the assertions and call to print in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test ",Object(o.b)("inlineCode",{parentName:"p"},"add_front")," on a linked list."))),Object(o.b)("h5",{id:"remove_after-and-remove_front"},Object(o.b)("inlineCode",{parentName:"h5"},"remove_after")," and ",Object(o.b)("inlineCode",{parentName:"h5"},"remove_front")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"remove_after")," and ",Object(o.b)("inlineCode",{parentName:"p"},"remove_front")," functions.  The first removes ",Object(o.b)("em",{parentName:"p"},"and frees")," the node immediately after the argument. The second removes ",Object(o.b)("em",{parentName:"p"},"and frees")," the head of the list and updates the head pointer. Each one should return the character in the node being removed."),Object(o.b)("p",{parentName:"li"},"For example, if your list includes the values ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"a b c d e")),", then ",Object(o.b)("inlineCode",{parentName:"p"},"remove_after")," called on a pointer to the node containing ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"c"))," would result in a list containing ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"a b c e")),", and would return ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"d")),".  And a call to ",Object(o.b)("inlineCode",{parentName:"p"},"remove_front")," on that revised list would result in a list containing ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"b c e")),", and would return ",Object(o.b)("em",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"em"},"a")),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the call to ",Object(o.b)("inlineCode",{parentName:"p"},"remove_after")," and ",Object(o.b)("inlineCode",{parentName:"p"},"remove_front")," in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the program with valgrind to confirm there is no memory problem."))),Object(o.b)("h5",{id:"remove_all"},Object(o.b)("inlineCode",{parentName:"h5"},"remove_all")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"remove_all")," function. This removes all nodes in the list whose value matches the argument.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the call to ",Object(o.b)("inlineCode",{parentName:"p"},"remove_all")," in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the program with valgrind to confirm there is no memory problem."))),Object(o.b)("h5",{id:"insert"},Object(o.b)("inlineCode",{parentName:"h5"},"insert")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Implement the ",Object(o.b)("inlineCode",{parentName:"p"},"insert")," function. This function takes a pointer to the head of the list (which may point to NULL), creates a node with the prescribed value, and inserts it into the list ",Object(o.b)("em",{parentName:"p"},"in sorted order"),". This function will set the new head pointer if the head of the linked list has been updated."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"You can assume that when the function is called, the linked list comes in sorted."),Object(o.b)("li",{parentName:"ul"},"For sorting, use the ",Object(o.b)("inlineCode",{parentName:"li"},"<")," and ",Object(o.b)("inlineCode",{parentName:"li"},">")," operators. (e.g. the character \u2018a\u2019 should be larger than the character ",Object(o.b)("inlineCode",{parentName:"li"},"'B'"),".)"),Object(o.b)("li",{parentName:"ul"},"Feel free to make use of the ",Object(o.b)("inlineCode",{parentName:"li"},"add_front")," and ",Object(o.b)("inlineCode",{parentName:"li"},"add_after")," methods you have already written."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Uncomment the call to ",Object(o.b)("inlineCode",{parentName:"p"},"insert")," in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the program with valgrind to confirm there is no memory problem."))),Object(o.b)("h5",{id:"other-functions"},"other functions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"There are couple more functions declared in ",Object(o.b)("inlineCode",{parentName:"p"},"list.h"),".  Check them out and implement them when you have time.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"After you have implemented those functions, uncomment the related part in ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," to test your implementation.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Always run the program with valgrind to confirm there is no memory problem."))),Object(o.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What do we need to use pointer-to-pointer in ",Object(o.b)("inlineCode",{parentName:"li"},"clear_list"),", ",Object(o.b)("inlineCode",{parentName:"li"},"add_front")," and ",Object(o.b)("inlineCode",{parentName:"li"},"remove_front")," functions?"),Object(o.b)("li",{parentName:"ol"},"When you implement the recursive print version, how do you figure out the recursive relationship?"),Object(o.b)("li",{parentName:"ol"},"How can you extend your implementation to make it a ",Object(o.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Doubly_linked_list"},"doubly linked list"),"?")),Object(o.b)("h3",{id:"part-2---gradescope-submission"},"Part 2 - Gradescope submission"),Object(o.b)("p",null,"Create a ",Object(o.b)("em",{parentName:"p"},"zip")," file called ",Object(o.b)("inlineCode",{parentName:"p"},"ex8.zip"),", which contains ",Object(o.b)("inlineCode",{parentName:"p"},"list.c")," and ",Object(o.b)("inlineCode",{parentName:"p"},"list.h")," with your implementation (you don't need to submit ",Object(o.b)("inlineCode",{parentName:"p"},"main.c")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),").  Submit the zip file as ",Object(o.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1348172"},"Day 8 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}m.isMDXComponent=!0}}]);