(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return m}));var a=n(2),i=n(6),o=(n(0),n(107)),r=["components"],c={id:"ex15",title:"Day 15 In-class Exercise"},s={unversionedId:"exercises/ex15",id:"exercises/ex15",isDocsHomePage:!1,title:"Day 15 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester, passing the auto-grader tests.",source:"@site/docs\\exercises\\ex15.md",slug:"/exercises/ex15",permalink:"/cs220-summer21/docs/exercises/ex15",version:"current"},l=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - A complex number class",id:"part-1---a-complex-number-class",children:[]},{value:"Part 2 - A C++ linked-list class",id:"part-2---a-c-linked-list-class",children:[]},{value:"Part 3 - A C++ templated linked-list class",id:"part-3---a-c-templated-linked-list-class",children:[]},{value:"Part 4 - Gradescope submission",id:"part-4---gradescope-submission",children:[]}]}],p={rightToc:l};function m(e){var t=e.components,n=Object(i.a)(e,r);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester, passing the auto-grader tests. "))),Object(o.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(o.b)("div",{className:"admonition admonition-success alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This exercise will help you gain familiarity with:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"C++ classes, fields & member functions"),Object(o.b)("li",{parentName:"ul"},"Operator overloading"),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"friend")," keyword"),Object(o.b)("li",{parentName:"ul"},"Linked lists in C++"),Object(o.b)("li",{parentName:"ul"},"Rule of three"),Object(o.b)("li",{parentName:"ul"},"Writing template classes")))),Object(o.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(o.b)("p",null,"Get the starter codes from ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(o.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(o.b)("inlineCode",{parentName:"p"},"ex15")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(o.b)("inlineCode",{parentName:"p"},"complex.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"int_node.h"),", ",Object(o.b)("inlineCode",{parentName:"p"},"main[x].cpp"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),"."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(o.b)("h3",{id:"part-1---a-complex-number-class"},"Part 1 - A complex number class"),Object(o.b)("h4",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"In this part, you will finish the implementation of a complex number class and practice C++ operator overloading."),Object(o.b)("h4",{id:"instructions"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Read the instructional comments in ",Object(o.b)("inlineCode",{parentName:"p"},"complex.[cpp|h]")," and ",Object(o.b)("inlineCode",{parentName:"p"},"main1.cpp"),".  It shows an example of how to use the given code for the ",Object(o.b)("inlineCode",{parentName:"p"},"Complex")," class. You can compile and run the code using the commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main1"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The first task is to overload and implement the ",Object(o.b)("inlineCode",{parentName:"p"},"operator<<")," function for printing out a complex number. You will also have to add the appropriate function declaration in ",Object(o.b)("inlineCode",{parentName:"p"},"complex.h"),". After your implementation, you can uncomment the related parts in ",Object(o.b)("inlineCode",{parentName:"p"},"main1.c"),", compile and test your implementation. (Note: Remember to use the ",Object(o.b)("inlineCode",{parentName:"p"},"friend")," keyword.)")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Follow the instructions in the comments in ",Object(o.b)("inlineCode",{parentName:"p"},"complex.[cpp|h]")," to write the missing functions for which we have provided declarations in the ",Object(o.b)("inlineCode",{parentName:"p"},"complex.h")," file.  You should not change anything in the ",Object(o.b)("inlineCode",{parentName:"p"},"complex.h")," file for this part. Try not to reinvent the wheel, but take advantage of code reuse where possible. After your implementation, you can uncomment the related parts in ",Object(o.b)("inlineCode",{parentName:"p"},"main1.c"),", compile and test your implementation.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Note that multiplying a ",Object(o.b)("inlineCode",{parentName:"p"},"float")," with a ",Object(o.b)("inlineCode",{parentName:"p"},"Complex")," object will not work as we have not overloaded the ",Object(o.b)("inlineCode",{parentName:"p"},"operator*")," for the ",Object(o.b)("inlineCode",{parentName:"p"},"float")," type. This can be done by adding a non-member function to allow a ",Object(o.b)("inlineCode",{parentName:"p"},"float")," to be multiplied with a ",Object(o.b)("inlineCode",{parentName:"p"},"Complex")," object. You will have to add the appropriate function declaration in ",Object(o.b)("inlineCode",{parentName:"p"},"complex.h")," and implement this function in ",Object(o.b)("inlineCode",{parentName:"p"},"complex.cpp"),". After your implementation, you can uncomment the related parts in ",Object(o.b)("inlineCode",{parentName:"p"},"main1.c"),", compile and test your implementation."))),Object(o.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What is operator overloading in C++?"),Object(o.b)("li",{parentName:"ol"},"What is a friend function?"),Object(o.b)("li",{parentName:"ol"},"When should we use the keyword ",Object(o.b)("inlineCode",{parentName:"li"},"friend")," to grant access to other classes?  When should we make the member fields public instead?")),Object(o.b)("h3",{id:"part-2---a-c-linked-list-class"},"Part 2 - A C++ linked-list class"),Object(o.b)("h4",{id:"introduction-1"},"Introduction"),Object(o.b)("p",null,"In this part, you will follow the instructions in the source code comments and finish the implementation of a linked list class in C++. You will practice implementing a C++ class, overloading operators, writing friend functions, and applying the rule of 3."),Object(o.b)("h4",{id:"instructions-1"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Read ",Object(o.b)("inlineCode",{parentName:"p"},"main2.cpp"),".  It shows an example of how to use the given code for the ",Object(o.b)("inlineCode",{parentName:"p"},"int_set")," class. You can compile and run the code using the commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main2")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main2"),". Some of the statements in ",Object(o.b)("inlineCode",{parentName:"p"},"main2.cpp")," will not compile yet because of missing functions in ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.cpp"),". You can comment them out to check that the supplied code is working correctly. ")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Follow the instructional comments in ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.cpp")," to write the ",Object(o.b)("inlineCode",{parentName:"p"},"operator<<"),", destructor, copy constructor, ",Object(o.b)("inlineCode",{parentName:"p"},"operator+="),", and ",Object(o.b)("inlineCode",{parentName:"p"},"operator="),", which we have prototyped in the ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.h")," header. You should not change anything in the ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.h")," file. Do not reinvent the wheel when implementing these functions! That is, consider how code reuse can make your job easier. You can test your implementation with ",Object(o.b)("inlineCode",{parentName:"p"},"main2"),", but will need to gradually uncomment some sections as you implement the above functions.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run ",Object(o.b)("inlineCode",{parentName:"p"},"valgrind")," on ",Object(o.b)("inlineCode",{parentName:"p"},"main2.cpp")," by calling ",Object(o.b)("inlineCode",{parentName:"p"},"valgrind --leak-check=full ./main2"),". Fix any memory leaks that it finds. Finally, add a new line in ",Object(o.b)("inlineCode",{parentName:"p"},"main2.cpp")," which assigns an existing non-empty set to itself, e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"s = s;"),"  Investigate what occurs using ",Object(o.b)("inlineCode",{parentName:"p"},"valgrind"),"! See if you are able to eliminate any problems that occur."))),Object(o.b)("h4",{id:"checkpoints-1"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What is the rule of 3? Which functions do you need to customize?"),Object(o.b)("li",{parentName:"ol"},"Look it up online: In C++11, what is the rule of 5?"),Object(o.b)("li",{parentName:"ol"},"What is the difference between the copy constructor and the assignment operator?")),Object(o.b)("h3",{id:"part-3---a-c-templated-linked-list-class"},"Part 3 - A C++ templated linked-list class"),Object(o.b)("h4",{id:"introduction-2"},"Introduction"),Object(o.b)("p",null,"In this part, you will transform the linked list class you just implemented to make it templated."),Object(o.b)("h4",{id:"instructions-2"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Read ",Object(o.b)("inlineCode",{parentName:"p"},"main3.cpp"),".  It shows an example of how to use a new template class named ",Object(o.b)("inlineCode",{parentName:"p"},"my_set"),". Before you can compile and run the code using commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main3")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main3"),", you will need to finish the missing part in ",Object(o.b)("inlineCode",{parentName:"p"},"my_set.inc"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Parts of the ",Object(o.b)("inlineCode",{parentName:"p"},"int_set")," have been transformed to the templated version ",Object(o.b)("inlineCode",{parentName:"p"},"my_set"),".  Refer to your finished implementation above and complete the missing parts.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"The templated version should work with the templated ",Object(o.b)("inlineCode",{parentName:"p"},"my_node")," with any base type, so ",Object(o.b)("inlineCode",{parentName:"p"},"my_set")," can be used with any base type that has the operations ",Object(o.b)("inlineCode",{parentName:"p"},"==")," and ",Object(o.b)("inlineCode",{parentName:"p"},"<")," defined for it. (We must have these two defined, since we use them to maintain our sorted linked list, and to be able to avoid duplicates in our sets.)")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"You can test your implementation with ",Object(o.b)("inlineCode",{parentName:"p"},"./main3"),"."))),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"1) Don't use ",Object(o.b)("inlineCode",{parentName:"p"},"my_set<T>")," inside the class definition for my_set (.h) file. You need it at the top of the class, but inside the class, use ",Object(o.b)("inlineCode",{parentName:"p"},"my_set")," instead."),Object(o.b)("p",{parentName:"div"},"2) Since ",Object(o.b)("inlineCode",{parentName:"p"},"operator<<")," is a friend rather than a member of the class, it will need a different template parameter (e.g., in ",Object(o.b)("inlineCode",{parentName:"p"},"my_set.h"),"):"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-c"},"template<typename U>\nfriend std::ostream& operator<<(std::ostream& os, const my_set<U>& s);\n")),Object(o.b)("p",{parentName:"div"},"3) In ",Object(o.b)("inlineCode",{parentName:"p"},"my_set.inc"),", use ",Object(o.b)("inlineCode",{parentName:"p"},"my_set<T>::")," as the prefix for class method definitions."))),Object(o.b)("ol",{start:5},Object(o.b)("li",{parentName:"ol"},"Run ",Object(o.b)("inlineCode",{parentName:"li"},"valgrind")," on ",Object(o.b)("inlineCode",{parentName:"li"},"main3.cpp"),". Fix any memory leaks that it finds.")),Object(o.b)("h4",{id:"checkpoints-2"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What is a template parameter? How is it used in a templated class / function?"),Object(o.b)("li",{parentName:"ol"},"Why do we need another template parameter for the friend function?"),Object(o.b)("li",{parentName:"ol"},"Where have you included the ",Object(o.b)("inlineCode",{parentName:"li"},".inc")," file? Why can't we separate declaration and definition for a templated class's functions?")),Object(o.b)("h3",{id:"part-4---gradescope-submission"},"Part 4 - Gradescope submission"),Object(o.b)("p",null,"Create a ",Object(o.b)("em",{parentName:"p"},"zip")," file called ",Object(o.b)("inlineCode",{parentName:"p"},"ex15.zip"),", which contains ",Object(o.b)("inlineCode",{parentName:"p"},"complex.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"int_set.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"int_node.h"),", ",Object(o.b)("inlineCode",{parentName:"p"},"my_set.[h|inc]"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"my_node.h")," with your implementation (you don't need to submit the ",Object(o.b)("inlineCode",{parentName:"p"},"main[x].cpp")," files and the Makefile. The autograder has its own Makefile and ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp")," for testing).  Submit the zip file as ",Object(o.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1353457"},"Day 15 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}m.isMDXComponent=!0},107:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(r,".").concat(d)]||m[d]||b[d]||o;return n?i.a.createElement(h,c(c({ref:t},l),{},{components:n})):i.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);