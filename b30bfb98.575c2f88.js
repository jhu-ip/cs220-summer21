(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),l=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(n),m=a,h=b["".concat(r,".").concat(m)]||b[m]||d[m]||o;return n?i.a.createElement(h,c(c({ref:t},p),{},{components:n})):i.a.createElement(h,c({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var p=2;p<o;p++)r[p]=n[p];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),o=(n(0),n(104)),r=["components"],c={id:"ex12",title:"Day 12 In-class Exercise"},s={unversionedId:"exercises/ex12",id:"exercises/ex12",isDocsHomePage:!1,title:"Day 12 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester and pass the tests.",source:"@site/docs\\exercises\\ex12.md",slug:"/exercises/ex12",permalink:"/cs220-summer21/docs/exercises/ex12",version:"current"},p=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - <code>std::map</code>",id:"part-1---stdmap",children:[]},{value:"Part 2 - <code>std::sort</code>",id:"part-2---stdsort",children:[]},{value:"Part 3 - Gradescope submission",id:"part-3---gradescope-submission",children:[]}]}],l={rightToc:p};function b(e){var t=e.components,n=Object(i.a)(e,r);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester and pass the tests. "))),Object(o.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(o.b)("div",{className:"admonition admonition-success alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This exercise will help you gain familiarity with:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"C++ basics: I/O using iostream library, how to compile/link/execute"),Object(o.b)("li",{parentName:"ul"},"Using the C++ Standard Template Library (std::vector, std::map, std::sort) and iterators)"),Object(o.b)("li",{parentName:"ul"},"Recursion")))),Object(o.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(o.b)("p",null,"Get the starter codes from ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(o.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(o.b)("inlineCode",{parentName:"p"},"ex12")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(o.b)("inlineCode",{parentName:"p"},"map-simple.cpp"),", ",Object(o.b)("inlineCode",{parentName:"p"},"input.txt"),", ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp"),", ",Object(o.b)("inlineCode",{parentName:"p"},"sort.cpp"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"monkeys.txt"),"."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(o.b)("h3",{id:"part-1---stdmap"},"Part 1 - ",Object(o.b)("inlineCode",{parentName:"h3"},"std::map")),Object(o.b)("h4",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"In this part, you are provided with a completed program (",Object(o.b)("inlineCode",{parentName:"p"},"map-simple.cpp"),") that reads input pairs representing phone contacts made of a name string and a phone number string from standard input, and inserts each into a ",Object(o.b)("inlineCode",{parentName:"p"},"std::map")," structure. The name is the key in the map, and the phone number for that person is the value associated with that key in the map.  This program will serve as a reference for you to follow as you work with ",Object(o.b)("inlineCode",{parentName:"p"},"std::map")," to complete the remainder of the exercise."),Object(o.b)("h4",{id:"instructions"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Compile and link ",Object(o.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," by typing: ",Object(o.b)("inlineCode",{parentName:"p"},"g++ -std=c++11 -Wall -Wextra -pedantic map-simple.cpp -o map-simple")," or using our alias ",Object(o.b)("inlineCode",{parentName:"p"},"g+++ map-simple.cpp -o map-simple"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the executable ",Object(o.b)("inlineCode",{parentName:"p"},"map-simple")," using the file ",Object(o.b)("inlineCode",{parentName:"p"},"input.txt")," in place of interactive input by typing: ",Object(o.b)("inlineCode",{parentName:"p"},"cat input.txt | ./map-simple"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Now, look inside ",Object(o.b)("inlineCode",{parentName:"p"},"input.txt")," and then the code in ",Object(o.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," and try to understand how it works.  Here are a few items we want to highlight:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Notice that four (name, phone) pairs are present in the input file, but only three remain in the map when it is output.  This illustrates an important point about maps: only one occurrence of a ",Object(o.b)("em",{parentName:"p"},"key")," value is allowed (that is, the original value for the key Sara is replaced by the second value supplied later in the input file).  ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"We make use of a ",Object(o.b)("inlineCode",{parentName:"p"},"const_iterator")," named ",Object(o.b)("inlineCode",{parentName:"p"},"it")," to traverse the map entries so that we can output them.  Each entry is a pair, and it runs over each of them in succession, so when we access ",Object(o.b)("inlineCode",{parentName:"p"},"it->first"),", we get the current entry's ",Object(o.b)("em",{parentName:"p"},"key")," (i.e. name), and when we access ",Object(o.b)("inlineCode",{parentName:"p"},"it->second"),", we get the current entry's value (i.e. phone number).")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Note also that the values in the map are output in ascending order by key (i.e. name) value, even though they were not inserted in that order.  We did not need to explicitly sort them in our code, either.  "),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"A map will always organize its entries in ascending order by key.")))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Before moving on to the next step, make sure you follow what is happening in this code. Rushing to the next step without understanding this code will not get you done with this exercise any more quickly! Please ask questions if something does not make sense.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Now, you will work on editing ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp")," to work with maps in a more sophisticated way. You'll add code to read in words from standard input until end of file occurs, and populate the ",Object(o.b)("inlineCode",{parentName:"p"},"map<string, int>")," named ",Object(o.b)("inlineCode",{parentName:"p"},"counters")," so that each entry has a key which is a collected word and the corresponding value is the number of times that word appears in the file. The code to output the counters map contents is already present in this file.   ")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Once you've modified it, you'll compile ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp")," using: ",Object(o.b)("inlineCode",{parentName:"p"},"g++ -std=c++11 -Wall -Wextra -pedantic main.cpp -o main")," or the alias ",Object(o.b)("inlineCode",{parentName:"p"},"g+++ main.cpp -o main"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the executable ",Object(o.b)("inlineCode",{parentName:"p"},"main")," using the file ",Object(o.b)("inlineCode",{parentName:"p"},"monkeys.txt")," in place of interactive input by typing: ",Object(o.b)("inlineCode",{parentName:"p"},"cat monkeys.txt | ./main")),Object(o.b)("p",{parentName:"li"},"Note that the contents of ",Object(o.b)("inlineCode",{parentName:"p"},"monkeys.txt")," are as shown below:"),Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"and Mama called the doctor and the doctor said no more monkeys")),Object(o.b)("p",{parentName:"li"},"So, if your code works correctly, you should see the following output:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"word Mama has 1 occurrences \nword and has 2 occurrences \nword called has 1 occurrences \nword doctor has 2 occurrences \nword monkeys has 1 occurrences \nword more has 1 occurrences \nword no has 1 occurrences \nword said has 1 occurrences \nword the has 2 occurrences\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Once you have the counters map properly populated, and you confirmed that your output is correct, you can now work on rearranging that data you collected. You need to write code that will go through the simple ",Object(o.b)("inlineCode",{parentName:"p"},"counters")," map you populated and copy over the data into a new map called ",Object(o.b)("inlineCode",{parentName:"p"},"words_by_freq"),", but rearrange your data so that each entry in the new map has an integer key, and has an entire vector of strings as its value. The vector will hold all strings with the frequency indicated by the key integer.  Recall that the ",Object(o.b)("inlineCode",{parentName:"p"},"push_back")," method in ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector")," allows you to add an item at the end of a vector."),Object(o.b)("p",{parentName:"li"},"Once you have done this properly, if run with ",Object(o.b)("inlineCode",{parentName:"p"},"monkeys.txt")," as input, your ",Object(o.b)("inlineCode",{parentName:"p"},"words_by_freq")," map will contain entries like this:"),Object(o.b)("table",{parentName:"li"},Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"key (an ",Object(o.b)("em",{parentName:"th"},"int"),")"),Object(o.b)("th",{parentName:"tr",align:null},"value (a ",Object(o.b)("em",{parentName:"th"},"vector")," of strings)"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"1"),Object(o.b)("td",{parentName:"tr",align:null},"Mama, called, monkeys, more, no, said")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"2"),Object(o.b)("td",{parentName:"tr",align:null},"and, doctor, the")))),Object(o.b)("p",{parentName:"li"},"You can think of the ",Object(o.b)("inlineCode",{parentName:"p"},"words_by_freq")," map as a notebook of information, where each entry is a page, and at the top of the page, you wrote an integer frequency, and on the rest of the page, you've written a list of all the words you encountered with that frequency.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"To confirm that your code is correct, write code to output the contents of the ",Object(o.b)("inlineCode",{parentName:"p"},"words_by_freq")," map you populated using ",Object(o.b)("inlineCode",{parentName:"p"},"const_iterators")," (not just one but two!) This means that for each entry in the map, you will need to output the frequency key, and then iterate separately over the strings in the vector. (Happily, iterators can be used over vectors as well as maps!) So, if the input words are the contents of ",Object(o.b)("inlineCode",{parentName:"p"},"monkeys.txt"),", then the output from this part should be:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"Frequency: 1\nMama\ncalled\nmonkeys \nmore \nno \nsaid                                                                    \nFrequency: 2 \nand \ndoctor \nthe  \n")),Object(o.b)("p",{parentName:"li"},"If some frequency does not exist in the table, then your code should not output it.  For example, if your input was the following words:"),Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"the tall tall tall giraffe")),Object(o.b)("p",{parentName:"li"},"Then the output from this part would be:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-bash"},"Frequency: 1\ngiraffe\nthe\nFrequency: 3\ntall\n")),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The words for each frequency shown in the sample output above are shown in alphabetical (dictionary) ordering.  Recall that unlike ",Object(o.b)("inlineCode",{parentName:"p"},"std::map")," a ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector")," is not automatically stored in order based on ",Object(o.b)("inlineCode",{parentName:"p"},"<"),", so think about why this is.",Object(o.b)("br",{parentName:"p"}),"\n",Object(o.b)("strong",{parentName:"p"},"Hint:")," we did not use ",Object(o.b)("inlineCode",{parentName:"p"},"std:sort")," or even go out of our way at all to make this happen!"))))),Object(o.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What is ",Object(o.b)("inlineCode",{parentName:"li"},"std::map"),"?  When will you use a map to store you data?"),Object(o.b)("li",{parentName:"ol"},"How do you iterate through a map in C++?"),Object(o.b)("li",{parentName:"ol"},"Is data stored in a C++ map sorted?  If so, how is it sorted?"),Object(o.b)("li",{parentName:"ol"},"What's the difference between an iterator and a constant iterator?"),Object(o.b)("li",{parentName:"ol"},"Look it up: besides ",Object(o.b)("inlineCode",{parentName:"li"},"std::vector")," and ",Object(o.b)("inlineCode",{parentName:"li"},"std::map"),", what other data containers are provided by STL?")),Object(o.b)("h3",{id:"part-2---stdsort"},"Part 2 - ",Object(o.b)("inlineCode",{parentName:"h3"},"std::sort")),Object(o.b)("h4",{id:"introduction-1"},"Introduction"),Object(o.b)("p",null,"In this part, you are going to implement the ",Object(o.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Merge_sort"},"merge sort")," algorithm and compare your results with ",Object(o.b)("inlineCode",{parentName:"p"},"std::sort"),"."),Object(o.b)("h4",{id:"instructions-1"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"In the supplied file ",Object(o.b)("inlineCode",{parentName:"p"},"sort.cpp"),", read an integer from the standard input into ",Object(o.b)("inlineCode",{parentName:"p"},"count"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Modify the ",Object(o.b)("inlineCode",{parentName:"p"},"vec")," array so that it stores ",Object(o.b)("inlineCode",{parentName:"p"},"count")," random values. In C++, we use functions/classes defined in ",Object(o.b)("inlineCode",{parentName:"p"},"<random>")," to generate random numbers:"),Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"Normally, you will first declare a random device (e.g. ",Object(o.b)("inlineCode",{parentName:"li"},"std::random_device rd"),"), then use the random device as your seed for the random number generation engine (e.g. ",Object(o.b)("inlineCode",{parentName:"li"},"std::default_random_engine eng{rd()}"),".  In this exercise, to match our expected output, you will not use the random device. Instead, you will use a fixed seed to initialize the engine. Add the code below to declare a random number generation engine with seed ",Object(o.b)("inlineCode",{parentName:"li"},"1"),":",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-c++"},"std::default_random_engine rd_eng{static_cast<long unsigned int>(1)};\n"))),Object(o.b)("li",{parentName:"ol"},"Next, declare a uniform integer distribution generator by adding this code:",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-c++"},"std::uniform_int_distribution<int> dist(0, 2000);\n")),"This generator generates random integers between 0 and 2000."),Object(o.b)("li",{parentName:"ol"},"Now, you can generate a random integer by calling ",Object(o.b)("inlineCode",{parentName:"li"},"dist(rd_eng)"),". Use it to generate ",Object(o.b)("inlineCode",{parentName:"li"},"count")," random values into ",Object(o.b)("inlineCode",{parentName:"li"},"vec"),"."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Compile and link ",Object(o.b)("inlineCode",{parentName:"p"},"sort.cpp")," by typing: ",Object(o.b)("inlineCode",{parentName:"p"},"g++ -std=c++11 -Wall -Wextra -pedantic sort.cpp -o sort")," or using the alias ",Object(o.b)("inlineCode",{parentName:"p"},"g+++ sort.cpp -o sort"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run the executable ",Object(o.b)("inlineCode",{parentName:"p"},"sort"),", specify that the vector ",Object(o.b)("inlineCode",{parentName:"p"},"vec")," should have 50 values, and confirm that this causes an assertion failure (because the random numbers are not sorted), by typing: ",Object(o.b)("inlineCode",{parentName:"p"},"echo 50 | ./sort"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Define the ",Object(o.b)("inlineCode",{parentName:"p"},"sort")," function so that it implements the ",Object(o.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Merge_sort"},"merge sort")," algorithm that is similar to the binary search that you have done in C. This time, you will use ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector")," instead of the C array."),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The merge sort algorithm is a recursive algorithm for sorting a set of values. It splits a set of values into two, sorts each of the two subsets independently, and then merges the two sorted subsets into a single sorted set. This pseudocode should be helpful for your implementation:"),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol"},"If the input vector has less than 2 elements, the vector is sorted. So no recursive call is needed (base case)."),Object(o.b)("li",{parentName:"ol"},"Otherwise:",Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"Split the vector into two sub-vectors and copy them into two vector variables called ",Object(o.b)("inlineCode",{parentName:"li"},"left")," and ",Object(o.b)("inlineCode",{parentName:"li"},"right")," (divide step)."),Object(o.b)("li",{parentName:"ol"},"Recursively sort ",Object(o.b)("inlineCode",{parentName:"li"},"left")," and ",Object(o.b)("inlineCode",{parentName:"li"},"right")," (conquer step)."),Object(o.b)("li",{parentName:"ol"},"After the recursive calls, both ",Object(o.b)("inlineCode",{parentName:"li"},"left")," and ",Object(o.b)("inlineCode",{parentName:"li"},"right")," are sorted. We are going to merge them back into the input vector as follows (merge step):",Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},"Set",Object(o.b)("inlineCode",{parentName:"li"},"left_idx")," and ",Object(o.b)("inlineCode",{parentName:"li"},"right_idx")," to 0."),Object(o.b)("li",{parentName:"ol"},"Loop ",Object(o.b)("inlineCode",{parentName:"li"},"input_idx")," from 0 to the input vector size. At each iteration:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"If ",Object(o.b)("inlineCode",{parentName:"li"},"left_idx")," is equal to the vector size of ",Object(o.b)("inlineCode",{parentName:"li"},"left"),", copy ",Object(o.b)("inlineCode",{parentName:"li"},"right[right_idx]")," to the input vector at position ",Object(o.b)("inlineCode",{parentName:"li"},"input_idx"),". Advance ",Object(o.b)("inlineCode",{parentName:"li"},"right_idx")," by 1."),Object(o.b)("li",{parentName:"ul"},"Else if ",Object(o.b)("inlineCode",{parentName:"li"},"right_idx")," is equal to the vector size of ",Object(o.b)("inlineCode",{parentName:"li"},"right"),", copy ",Object(o.b)("inlineCode",{parentName:"li"},"left[left_idx]")," to the input vector at position ",Object(o.b)("inlineCode",{parentName:"li"},"input_idx"),". Advance ",Object(o.b)("inlineCode",{parentName:"li"},"left_idx")," by 1."),Object(o.b)("li",{parentName:"ul"},"Else copy the smaller of ",Object(o.b)("inlineCode",{parentName:"li"},"left[left_idx]")," and ",Object(o.b)("inlineCode",{parentName:"li"},"right[right_idx]")," to the input vector at position ",Object(o.b)("inlineCode",{parentName:"li"},"input_idx"),". Advance the index of the smaller one by 1."))))))))))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Invoke STL's sort implementation to sort the contents in the vector ",Object(o.b)("inlineCode",{parentName:"p"},"vec2"),"."),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Be sure to include any necessary headers.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Compile and run, and compare the performance of your ",Object(o.b)("inlineCode",{parentName:"p"},"sort")," implementation with the one provided by STL."),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"To get a reasonable sense of the relative performance, it makes sense to use a large random vector (e.g. with millions of entries)."))))),Object(o.b)("h4",{id:"checkpoints-1"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Which one is faster? Your merge sort algorithm or ",Object(o.b)("inlineCode",{parentName:"li"},"std::sort"),"?"),Object(o.b)("li",{parentName:"ol"},"Look it up; besides ",Object(o.b)("inlineCode",{parentName:"li"},"std::uniform_int_distribution"),", what other distributions are provided by STL?"),Object(o.b)("li",{parentName:"ol"},"Look it up; besides ",Object(o.b)("inlineCode",{parentName:"li"},"std::sort"),", what other algorithms are provided by STL?")),Object(o.b)("h3",{id:"part-3---gradescope-submission"},"Part 3 - Gradescope submission"),Object(o.b)("p",null,"Create a ",Object(o.b)("em",{parentName:"p"},"zip")," file called ",Object(o.b)("inlineCode",{parentName:"p"},"ex12.zip"),", which contains ",Object(o.b)("inlineCode",{parentName:"p"},"main.cpp")," and ",Object(o.b)("inlineCode",{parentName:"p"},"sort.cpp")," with your implementation (you don't need to submit ",Object(o.b)("inlineCode",{parentName:"p"},"map-simple.cpp")," and any text files).  Submit the zip file as ",Object(o.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1353453"},"Day 12 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}b.isMDXComponent=!0}}]);