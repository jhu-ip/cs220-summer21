(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),r=(n(0),n(97)),o=["components"],c={id:"ex6",title:"Day 6 In-class Exercise"},s={unversionedId:"exercises/ex6",id:"exercises/ex6",isDocsHomePage:!1,title:"Day 6 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester.",source:"@site/docs\\exercises\\ex6.md",slug:"/exercises/ex6",permalink:"/cs220-summer21/docs/exercises/ex6",version:"current"},l=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - Binary search revisit",id:"part-1---binary-search-revisit",children:[]},{value:"Part 2 - Sudoku solution checker",id:"part-2---sudoku-solution-checker",children:[]},{value:"Part 3 - Diagnosing memory problem using <em>valgrind</em>",id:"part-3---diagnosing-memory-problem-using-valgrind",children:[]},{value:"Part 4 - Gradescope submission",id:"part-4---gradescope-submission",children:[]}]}],b={rightToc:l};function p(e){var t=e.components,n=Object(i.a)(e,o);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester. "))),Object(r.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(r.b)("div",{className:"admonition admonition-success alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This exercise will help you gain additional familiarity with:"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"Using pointer arithmetic to access array elements"),Object(r.b)("li",{parentName:"ul"},'Using pointer arithmetic to treat regions of a larger array as "sub-arrays"'),Object(r.b)("li",{parentName:"ul"},"Using pointer differences to compute indices of array elements based on their displacement from the base address"),Object(r.b)("li",{parentName:"ul"},"Using pointers to access subsets of a 2D array as 1D arrays"),Object(r.b)("li",{parentName:"ul"},"Creating complex structs"),Object(r.b)("li",{parentName:"ul"},"Utilizing structs with functions, structs, and arrays, and structs and pointers"),Object(r.b)("li",{parentName:"ul"},"malloc and free"),Object(r.b)("li",{parentName:"ul"},"scanf/printf")))),Object(r.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(r.b)("p",null,"Get the starter codes from ",Object(r.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(r.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(r.b)("inlineCode",{parentName:"p"},"ex6")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(r.b)("inlineCode",{parentName:"p"},"bsearch.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudoku.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelpers.h"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelpers.c"),", 3 plain text input puzzle files ",Object(r.b)("inlineCode",{parentName:"p"},"puzzle*.txt"),", ",Object(r.b)("inlineCode",{parentName:"p"},"main.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.h"),", and a ",Object(r.b)("inlineCode",{parentName:"p"},"Makefile"),"."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(r.b)("h3",{id:"part-1---binary-search-revisit"},"Part 1 - Binary search revisit"),Object(r.b)("h4",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"In this part, you are going to implement the binary search using pointers (instead of passing arrays as in ",Object(r.b)("a",{parentName:"p",href:"ex4"},"Exercise 4")," Part 3)."),Object(r.b)("h4",{id:"instructions"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Open ",Object(r.b)("inlineCode",{parentName:"p"},"bsearch.c")," with a text editor. ")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"To compile the code, use this command: ",Object(r.b)("inlineCode",{parentName:"p"},"gcc -std=c99 -pedantic -Wall -Wextra bsearch.c -g -o bsearch  ")," or use our alias: ",Object(r.b)("inlineCode",{parentName:"p"},"gccc bsearch.c -g -o bsearch"),". ")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Add a declaration and definition for a function called ",Object(r.b)("inlineCode",{parentName:"p"},"search"),". The declaration should look like this: ",Object(r.b)("inlineCode",{parentName:"p"},"int *search(int *start, int *end, int search_val);"),". (",Object(r.b)("inlineCode",{parentName:"p"},"TODO")," comments indicate where to add the declaration and definition.)")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"This function implements a binary search to find an integer value ",Object(r.b)("inlineCode",{parentName:"p"},"search_val")," in a region of a sorted array of ",Object(r.b)("inlineCode",{parentName:"p"},"int")," values. The ",Object(r.b)("inlineCode",{parentName:"p"},"start")," and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," parameters specify a range of elements to search, where ",Object(r.b)("inlineCode",{parentName:"p"},"start")," is a pointer to the inclusive start element, and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," is a pointer to the ",Object(r.b)("em",{parentName:"p"},"exclusive")," end element.  I.e., the pointers to the elements in the range to be searched are greater than or equal to ",Object(r.b)("inlineCode",{parentName:"p"},"start"),", and strictly less than ",Object(r.b)("inlineCode",{parentName:"p"},"end"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"If the search is successful, the ",Object(r.b)("inlineCode",{parentName:"p"},"search")," function should return a pointer to the element where ",Object(r.b)("inlineCode",{parentName:"p"},"search_val")," was located.  If the search is unsuccessful, the ",Object(r.b)("inlineCode",{parentName:"p"},"search")," function should return ",Object(r.b)("inlineCode",{parentName:"p"},"NULL"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Recall that you implemented binary search in ",Object(r.b)("a",{parentName:"p",href:"ex4"},"Exercise 4")," Part 3. Note that in today's exercise, you are not required to implement the binary search using recursion. Either recursion or iteration is fine. However, keep in mind that for Ex4 Part 3 both of the range indices ",Object(r.b)("inlineCode",{parentName:"p"},"low")," and ",Object(r.b)("inlineCode",{parentName:"p"},"high")," were ",Object(r.b)("em",{parentName:"p"},"inclusive"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Next, after you have implemented the ",Object(r.b)("inlineCode",{parentName:"p"},"search")," function, you should complete the code in the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function.  You will see a block of code that looks like this:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-c"},"// example of a successful search\npos = search(arr1, arr1 + 10, 809);\nassert(pos != NULL);\nassert(*pos == 809);\nindex = // TODO: compute the index of the matching element\nassert(7 == index);\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Fix the code at the point of the ",Object(r.b)("inlineCode",{parentName:"p"},"TODO")," comment so that it computes the index of the array element that ",Object(r.b)("inlineCode",{parentName:"p"},"pos")," points to, where ",Object(r.b)("inlineCode",{parentName:"p"},"pos")," is the result of a successful search.  "),Object(r.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Hint")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This will involve a ",Object(r.b)("em",{parentName:"p"},"pointer difference")," computation.")))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Once you've completed the ",Object(r.b)("inlineCode",{parentName:"p"},"main")," function, you should be able to run the program.  If the tests pass, you will see the output:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"All tests pass!\n")))),Object(r.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"What does the value of a ",Object(r.b)("em",{parentName:"li"},"pointer difference")," mean?"),Object(r.b)("li",{parentName:"ol"},"What is the difference and similarity between pointers and arrays?"),Object(r.b)("li",{parentName:"ol"},"Is it true that an array is a constant pointer?")),Object(r.b)("h3",{id:"part-2---sudoku-solution-checker"},"Part 2 - Sudoku solution checker"),Object(r.b)("h4",{id:"introduction-1"},"Introduction"),Object(r.b)("p",null,"For the next part of this exercise, you'll be finishing the implementation of a sudoku checker program. The purpose of the program is to read an input puzzle file, where 0s represent empty cells. It should then check every row, column and cube to see if the puzzle is completely solved already, or not. You will only need to modify the ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelper.c")," file, but should take time first to read through the code in the other files and ask if you have any questions."),Object(r.b)("h4",{id:"instructions-1"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"There are several helper functions you need to complete, as indicated by ",Object(r.b)("inlineCode",{parentName:"p"},"TODO")," comments in the file. In both ",Object(r.b)("inlineCode",{parentName:"p"},"makeCol")," and ",Object(r.b)("inlineCode",{parentName:"p"},"makeCube")," you need to declare the unit array that will be populated and returned in each function. (Their declarations will be identical.) You should also carefully read through the provided code in each method to ask if you don't understand how they work.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Next you'll need to call these functions from two other helpers, again where indicated by ",Object(r.b)("inlineCode",{parentName:"p"},"TODO")," comments in functions ",Object(r.b)("inlineCode",{parentName:"p"},"checkRows"),", ",Object(r.b)("inlineCode",{parentName:"p"},"checkCols")," and ",Object(r.b)("inlineCode",{parentName:"p"},"checkCubes"),". Once this is done correctly, you should be able to compile everything with the Makefile (",Object(r.b)("inlineCode",{parentName:"p"},"make sudoku"),") and run the ",Object(r.b)("inlineCode",{parentName:"p"},"sudoku")," program with each puzzle file as input. The first two are not correct/complete solutions, but ",Object(r.b)("inlineCode",{parentName:"p"},"puzzle3.txt")," is a completely solved puzzle.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Lastly, using the tools you learned in ",Object(r.b)("a",{parentName:"p",href:"ex5"},"Exercise 5")," during the last class session, modify the Makefile, adding the ",Object(r.b)("inlineCode",{parentName:"p"},"-g")," option to your compilation command(s) so that you can run ",Object(r.b)("inlineCode",{parentName:"p"},"gdb")," and ",Object(r.b)("inlineCode",{parentName:"p"},"valgrind")," on this code. Find a fix the memory leaks in ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelpers.c")," for this final task."))),Object(r.b)("h4",{id:"checkpoints-1"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"How do you pass a multi-dimensional array to a function?"),Object(r.b)("li",{parentName:"ol"},"Given ",Object(r.b)("inlineCode",{parentName:"li"},"int *table"),", what does it mean by ",Object(r.b)("inlineCode",{parentName:"li"},"table[10]"),"?"),Object(r.b)("li",{parentName:"ol"},"Does ",Object(r.b)("inlineCode",{parentName:"li"},"*(table + 5)")," and ",Object(r.b)("inlineCode",{parentName:"li"},"table[5]")," give the same output?")),Object(r.b)("h3",{id:"part-3---diagnosing-memory-problem-using-valgrind"},"Part 3 - Diagnosing memory problem using ",Object(r.b)("em",{parentName:"h3"},"valgrind")),Object(r.b)("h4",{id:"introduction-2"},"Introduction"),Object(r.b)("p",null,"In this part, you will practice how to ",Object(r.b)("inlineCode",{parentName:"p"},"struct")," in C. Follow below instructions and comments in codes to complete the task."),Object(r.b)("h4",{id:"instructions-2"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Open ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.h")," with a text editor. In this file you will find headers for three functions. You need to create struct types to contain information about a soccer \u201cPlayer\u201d; the \u201cDate\u201d shows the date the player was signed into a team and \u201cStat\u201d stores basic statistics of a player in a game. Note function declarations are already there. You must define the following struct types (green bold shows struct type names and bulleted items are the struct members) before the function headers: "),Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Stat")," "),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," num_of_goals (scored)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," num_of_assists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"float")," pass_accuracy"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," min_played"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," num_of_shots"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"float")," shot_accuracy")),Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Date")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," day"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," month"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," year")),Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"Player")),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," age"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"int")," jersey_num"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"bool")," goalkeeper"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Date *")," date  (pointer to a Date struct defined on the heap)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Stat *")," stat  (pointer to a Stat struct defined on the heap)"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Once you are finished defining the struct types in the header file, you may switch to ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.c"),". There are a few functions in this file, namely ",Object(r.b)("em",{parentName:"p"},"create_team"),", ",Object(r.b)("em",{parentName:"p"},"create_player"),", and ",Object(r.b)("em",{parentName:"p"},"print_team"),". All of those are fully implemented. You should review the implementation of these functions to make sure you understand them.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Next, switch to ",Object(r.b)("inlineCode",{parentName:"p"},"main.c"),". There are a few things you need to do here. First, you should read information from the input using ",Object(r.b)("em",{parentName:"p"},"scanf")," to create a stat structure. Note that this stat struct is dynamically defined on the heap and ",Object(r.b)("em",{parentName:"p"},"new_stat")," points to it. Then, you need to find the player with the latest signed date in the array \u201cteam\u201d. If there are multiple players with the same signed date, you would select the one with smallest index in the array. Finally, update the stat of the player at the index you found with ",Object(r.b)("em",{parentName:"p"},"new_stat"),". Once finished, you can produce an executable by running \u201cmake\u201d and run the executable by typing ",Object(r.b)("em",{parentName:"p"},"./main"),". Check if your code works as expected (i.e., the player\u2019s stats with most recent signed date gets updated properly). ")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Similar to what you have done in Part 2, add ",Object(r.b)("inlineCode",{parentName:"p"},"-g")," in the make file, which enables debugging. Run the program using valgrind ",Object(r.b)("inlineCode",{parentName:"p"},"valgrind  --leak-check=full  ./main"),". As you can see, we have calls to ",Object(r.b)("inlineCode",{parentName:"p"},"malloc")," in main and ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.c"),", but not enough calls to ",Object(r.b)("inlineCode",{parentName:"p"},"free"),"; there is only one call to ",Object(r.b)("inlineCode",{parentName:"p"},"free")," as a helper for you in ",Object(r.b)("inlineCode",{parentName:"p"},"main.c"),". You need to free stat and date structs on the heap for all the players in the team. Read the valgrind output and make modifications to ",Object(r.b)("inlineCode",{parentName:"p"},"main.c")," to fix the errors/memory leaks."))),Object(r.b)("h4",{id:"checkpoints-2"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"What is a ",Object(r.b)("inlineCode",{parentName:"li"},"struct")," in C?"),Object(r.b)("li",{parentName:"ol"},"Is passing a ",Object(r.b)("inlineCode",{parentName:"li"},"struct")," to function passed by values?"),Object(r.b)("li",{parentName:"ol"},"When do you use ",Object(r.b)("inlineCode",{parentName:"li"},"->")," to access the structure's fields and when do you use ",Object(r.b)("inlineCode",{parentName:"li"},".")," to access them?")),Object(r.b)("h3",{id:"part-4---gradescope-submission"},"Part 4 - Gradescope submission"),Object(r.b)("p",null,"Create a ",Object(r.b)("em",{parentName:"p"},"zip")," file called ",Object(r.b)("inlineCode",{parentName:"p"},"ex6.zip"),", which contains ",Object(r.b)("inlineCode",{parentName:"p"},"bsearch.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudoku.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelpers.h"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sudokuHelpers.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"main.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.c"),", ",Object(r.b)("inlineCode",{parentName:"p"},"soccer.h"),", and the ",Object(r.b)("inlineCode",{parentName:"p"},"Makefile")," with your implementation and fixes.  Submit the zip file as ",Object(r.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1348159"},"Day 6 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}p.isMDXComponent=!0},97:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),b=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(n),m=a,u=p["".concat(o,".").concat(m)]||p[m]||d[m]||r;return n?i.a.createElement(u,c(c({ref:t},l),{},{components:n})):i.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);