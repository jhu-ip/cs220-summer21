(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,u=b["".concat(o,".").concat(d)]||b[d]||m[d]||r;return n?i.a.createElement(u,c(c({ref:t},l),{},{components:n})):i.a.createElement(u,c({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(107)),o=["components"],c={id:"ex13",title:"Day 13 In-class Exercise"},s={unversionedId:"exercises/ex13",id:"exercises/ex13",isDocsHomePage:!1,title:"Day 13 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester and pass the tests.",source:"@site/docs\\exercises\\ex13.md",slug:"/exercises/ex13",permalink:"/cs220-summer21/docs/exercises/ex13",version:"current"},l=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - Abbreviating words in a text document",id:"part-1---abbreviating-words-in-a-text-document",children:[]},{value:"Part 2 - Analyzing tokens in a text document",id:"part-2---analyzing-tokens-in-a-text-document",children:[]},{value:"Part 3 - Analyzing a text document to find the relative frequencies letters",id:"part-3---analyzing-a-text-document-to-find-the-relative-frequencies-letters",children:[]},{value:"Part 4 - Gradescope submission",id:"part-4---gradescope-submission",children:[]}]}],p={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,o);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester and pass the tests. "))),Object(r.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(r.b)("div",{className:"admonition admonition-success alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This exercise will help you gain familiarity with:"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"C++ basics: file I/O using ",Object(r.b)("inlineCode",{parentName:"li"},"istream")," and ",Object(r.b)("inlineCode",{parentName:"li"},"ostream"),", ",Object(r.b)("inlineCode",{parentName:"li"},"string")," manipulation"),Object(r.b)("li",{parentName:"ul"},"Using ",Object(r.b)("inlineCode",{parentName:"li"},"stringstream")," to extract data from a string"),Object(r.b)("li",{parentName:"ul"},"C++ basics: references"),Object(r.b)("li",{parentName:"ul"},"STL: vectors and iterators")))),Object(r.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(r.b)("p",null,"Get the starter codes from ",Object(r.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(r.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(r.b)("inlineCode",{parentName:"p"},"ex13")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(r.b)("inlineCode",{parentName:"p"},"abbrev.cpp"),", ",Object(r.b)("inlineCode",{parentName:"p"},"classify.cpp"),", ",Object(r.b)("inlineCode",{parentName:"p"},"letter_freq.cpp"),", and some text files."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(r.b)("h3",{id:"part-1---abbreviating-words-in-a-text-document"},"Part 1 - Abbreviating words in a text document"),Object(r.b)("h4",{id:"introduction"},"Introduction"),Object(r.b)("p",null,'Words are often recognizable when one or more of the vowels ("a", "e", "i", "o", and "u") are omitted.  For example:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-plain"},"> W'rds 'r' 'ft'n r'c'gn'z'bl' wh'n 'n' 'r m'r' 'f th' v'w'ls 'r' 'm'tt'd.\n")),Object(r.b)("p",null,"In this transformed sentence, each vowel or consecutive group of vowels has been replaced with an apostrophe (",Object(r.b)("inlineCode",{parentName:"p"},"'"),") character.  It's a bit difficult to read, but not impossible.  To test the theory that text abbreviated this way is still readable, you will write a program to automatically abbreviate text."),Object(r.b)("h4",{id:"instructions"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"abbrev.cpp")," as follows.  The program takes two command line arguments.  The first is the name of an input file, which will contain the input text.  The second is the name of the output file to generate, containing the abbreviated form of the original text.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Compile the program using the command: ",Object(r.b)("inlineCode",{parentName:"p"},"g++ -g -std=c++11 -Wall -Wextra -pedantic abbrev.cpp -o abbrev")," or using the alias: ",Object(r.b)("inlineCode",{parentName:"p"},"g+++ -g abbrev.cpp -o abbrev"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Run the program with this usage: ",Object(r.b)("inlineCode",{parentName:"p"},"./abbrev example1.txt example1-abbrev.txt"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Before moving on to the next step, make sure you follow what is happening in this code. Rushing to the next step without understanding this code will not get you done with this exercise any more quickly! Please ask questions if something does not make sense."),Object(r.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"As you work, the documentation for the ",Object(r.b)("inlineCode",{parentName:"p"},"string")," class will be useful: ",Object(r.b)("a",{parentName:"p",href:"http://www.cplusplus.com/reference/string/string/"},"http://www.cplusplus.com/reference/string/string/"))))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Three example files are provided, ",Object(r.b)("inlineCode",{parentName:"p"},"example1.txt"),", ",Object(r.b)("inlineCode",{parentName:"p"},"example2.txt"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"example3.txt"),". The expected results of abbreviating the text in each file are in the files ",Object(r.b)("inlineCode",{parentName:"p"},"example1-expected.txt"),", ",Object(r.b)("inlineCode",{parentName:"p"},"example2-expected.txt"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"example3-expected.txt"),". You can check your program's output using the ",Object(r.b)("inlineCode",{parentName:"p"},"diff")," command, e.g. (assuming that your transformed version of ",Object(r.b)("inlineCode",{parentName:"p"},"example1.txt")," is called ",Object(r.b)("inlineCode",{parentName:"p"},"example1-abbrev.txt"),"): ",Object(r.b)("inlineCode",{parentName:"p"},"diff -w example1-expected.txt expected1-abbrev.txt"),"."),Object(r.b)("p",{parentName:"li"},"If the ",Object(r.b)("inlineCode",{parentName:"p"},"diff")," command produces no output, then your output matches the expected output. Here are some hints and suggestions."),Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"You can read the input file line by line using the ",Object(r.b)("inlineCode",{parentName:"p"},"getline")," function, which reads a line of text from an ",Object(r.b)("inlineCode",{parentName:"p"},"istream")," (including an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream"),") into a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," object.  Your main loop might look something like this (assuming that ",Object(r.b)("inlineCode",{parentName:"p"},"in")," is an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file):"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"string line;\nwhile (getline(in, line)) {\n  // do something with line\n}\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"To read words from a line, creating a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," from one line of text and then reading one word at a time can be accomplished as follows:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"stringstream ss(line);\nstring word;\nwhile (ss >> word) {\n  // do something with word\n}\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Defining a function with the following prototype will probably be a good idea:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"string abbreviate(const string &word);\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"You should use an ",Object(r.b)("inlineCode",{parentName:"p"},"ofstream")," to write the output file."))))),Object(r.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"How do you use ",Object(r.b)("inlineCode",{parentName:"li"},"stringstream")," in C++ to parse a line? Compare it with how you have done that in C."),Object(r.b)("li",{parentName:"ol"},"How do you make the comparison case insensitive?"),Object(r.b)("li",{parentName:"ol"},"How do you open a file in C++?  Compare it with how you have done that in C.")),Object(r.b)("h3",{id:"part-2---analyzing-tokens-in-a-text-document"},"Part 2 - Analyzing tokens in a text document"),Object(r.b)("h4",{id:"introduction-1"},"Introduction"),Object(r.b)("p",null,"One useful technique enabled by the ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," class is the capability to dynamically check a string to determine if it contains data in a particular form (integer value, floating point value, etc.)"),Object(r.b)("h4",{id:"instructions-1"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"classify.cpp")," so that it reads textual input from ",Object(r.b)("inlineCode",{parentName:"p"},"cin")," one token at a time, and then prints the following summary information:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"the sum of all floating point values found in the input"),Object(r.b)("li",{parentName:"ul"},"the sum of all integer values found in the input"),Object(r.b)("li",{parentName:"ul"},"the number of tokens (words) in the input that weren't numeric"),Object(r.b)("li",{parentName:"ul"},"the total length of all tokens in the input that weren't numeric")),Object(r.b)("div",{parentName:"li",className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A token should be considered a floating point value if a ",Object(r.b)("inlineCode",{parentName:"p"},"double")," value can be successfully extracted from it using a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A token should be considered an integer value if it is not a floating point value, but an ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value can be successfully extracted from it using a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream"),", such that the entire string is matched.  For example, the string ",Object(r.b)("inlineCode",{parentName:"p"},'"3.14159"')," could be extracted into an ",Object(r.b)("inlineCode",{parentName:"p"},"int")," variable, but only the ",Object(r.b)("inlineCode",{parentName:"p"},"3")," character would be matched, leaving the remaining text (",Object(r.b)("inlineCode",{parentName:"p"},'".14159"'),") unmatched.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"All tokens that aren't floating point or integer should be considered non-numeric.")))))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Compile the program using the command: ",Object(r.b)("inlineCode",{parentName:"p"},"g++ -g -std=c++11 -Wall -Wextra -pedantic classify.cpp -o classify")," or using the alais: ",Object(r.b)("inlineCode",{parentName:"p"},"g+++ -g classify.cpp -o classify"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Test your program by running the command: ",Object(r.b)("inlineCode",{parentName:"p"},"./classify < data.txt"),". The output should be something like:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-plain"},"Floating point sum: 387.542\nInteger sum: 8\nNumber of non-numeric tokens: 24\nNumber of characters in non-numeric tokens: 114\n")))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"One way to determine if extraction of an integer value from a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," consumed the entire string is to attempt to extract a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," after the ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value is extracted successfully.  If the extraction of the ",Object(r.b)("inlineCode",{parentName:"p"},"string")," value fails, then you know that the extraction of the ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value consumed the entire original string."))),Object(r.b)("h4",{id:"checkpoints-1"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"How do you make use of ",Object(r.b)("inlineCode",{parentName:"li"},"stringstream")," to check if a string can be converted to a number?"),Object(r.b)("li",{parentName:"ol"},"Compare your implementation with how you would have done that using C."),Object(r.b)("li",{parentName:"ol"},"How can you detect an EOF in C++ streams?")),Object(r.b)("h3",{id:"part-3---analyzing-a-text-document-to-find-the-relative-frequencies-letters"},"Part 3 - Analyzing a text document to find the relative frequencies letters"),Object(r.b)("h4",{id:"introduction-2"},"Introduction"),Object(r.b)("p",null,"In this part, you will practice working with input files, STL containers, and STL algorithms by counting the number of occurrences of each letter in a text document."),Object(r.b)("h4",{id:"instructions-2"},"Instructions"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"letter_freq.cpp"),' so that it counts the number of occurrences of each letter in the input text file specified as the command line argument. The program should ignore capitalization, so (for example) "',Object(r.b)("inlineCode",{parentName:"p"},"A"),'" and "',Object(r.b)("inlineCode",{parentName:"p"},"a"),'" are considered the same letter.')),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"As the data structure for recording the occurrence count of each letter, use a ",Object(r.b)("inlineCode",{parentName:"p"},"vector")," of ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," elements, where ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," is a struct defined something like the following:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"struct Bucket {\n  char letter;\n  unsigned count;\n};\n")),Object(r.b)("p",{parentName:"li"},"The vector should have one ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," per letter."),Object(r.b)("p",{parentName:"li"},"The program's main loop should read characters from the input file one at a time.  The ",Object(r.b)("inlineCode",{parentName:"p"},"get")," member function should be useful.  For example, if ",Object(r.b)("inlineCode",{parentName:"p"},"in")," is an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file, the  main loop might look something like this:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"char c;\nwhile (in.get(c)) {\n  // do something with c\n}\n")),Object(r.b)("p",{parentName:"li"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"<cctype>")," header is included, so that you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"isalpha"),", ",Object(r.b)("inlineCode",{parentName:"p"},"toupper")," and/or ",Object(r.b)("inlineCode",{parentName:"p"},"tolower")," functions.  Your program will need to know which characters are letters, and then convert each letter to a consistent case (upper or lower), in order to know which bucket to update when a letter is encountered."),Object(r.b)("p",{parentName:"li"},"Before printing the output, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"std::sort")," algorithm to sort the vector elements so that they are arranged from most-frequently occurring to least-frequently occurring.  To do this, implement a function with the following signature:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"bool compare_buckets(const Bucket &left, const Bucket &right);\n")),Object(r.b)("p",{parentName:"li"},"The function should return ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the ",Object(r.b)("inlineCode",{parentName:"p"},"left")," bucket should be before the ",Object(r.b)("inlineCode",{parentName:"p"},"right")," bucket.  If two buckets have the same count, then the one with the earlier letter should come first."),Object(r.b)("p",{parentName:"li"},"To sort the vector:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"sort(hist.begin(), hist.end(), compare_buckets);\n")),Object(r.b)("p",{parentName:"li"},"This code assumes that your ",Object(r.b)("inlineCode",{parentName:"p"},"vector")," of ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," elements is called ",Object(r.b)("inlineCode",{parentName:"p"},"hist"),".")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"After analyzing the input file, the program should print a table with the number of occurrences of each letter, in the order from most-frequently occurring to least-frequently occurring.  For example, the invocation ",Object(r.b)("inlineCode",{parentName:"p"},"./letter_freq example2.txt")," should produce the output"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre"},"e: 107\ni: 80\nt: 76\nn: 62\no: 62\na: 57\nr: 56\ns: 53\nh: 51\nl: 45\nm: 30\nu: 26\np: 25\ng: 24\nf: 22\ny: 22\nd: 21\nc: 18\nw: 17\nv: 13\nb: 9\nk: 4\nq: 2\nz: 2\n")))),Object(r.b)("h4",{id:"checkpoints-2"},"Checkpoints"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Which STL container do you use to store the histogram (number of occurrences)?"),Object(r.b)("li",{parentName:"ol"},"How do you find the most frequently occurring character?"),Object(r.b)("li",{parentName:"ol"},"Why do we need to provide a ",Object(r.b)("inlineCode",{parentName:"li"},"compare_buckets")," function to ",Object(r.b)("inlineCode",{parentName:"li"},"std::sort"),"?")),Object(r.b)("h3",{id:"part-4---gradescope-submission"},"Part 4 - Gradescope submission"),Object(r.b)("p",null,"Create a ",Object(r.b)("em",{parentName:"p"},"zip")," file called ",Object(r.b)("inlineCode",{parentName:"p"},"ex13.zip"),", which contains ",Object(r.b)("inlineCode",{parentName:"p"},"abbrev.cpp"),", ",Object(r.b)("inlineCode",{parentName:"p"},"classify.cpp")," and ",Object(r.b)("inlineCode",{parentName:"p"},"letter_freq.cpp")," with your implementation (you don't need to submit any text files).  Submit the zip file as ",Object(r.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1353454"},"Day 13 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}b.isMDXComponent=!0}}]);