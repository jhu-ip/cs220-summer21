(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(r,".").concat(m)]||d[m]||b[m]||o;return n?i.a.createElement(h,c(c({ref:t},l),{},{components:n})):i.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<o;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(6),o=(n(0),n(107)),r=["components"],c={id:"ex14",title:"Day 14 In-class Exercise"},s={unversionedId:"exercises/ex14",id:"exercises/ex14",isDocsHomePage:!1,title:"Day 14 In-class Exercise",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester, passing the autograder tests.",source:"@site/docs\\exercises\\ex14.md",slug:"/exercises/ex14",permalink:"/cs220-summer21/docs/exercises/ex14",version:"current"},l=[{value:"Learning Objectives",id:"learning-objectives",children:[{value:"Part 0 - Get the starter codes",id:"part-0---get-the-starter-codes",children:[]},{value:"Part 1 - A Grade List using <code>std::vector</code>",id:"part-1---a-grade-list-using-stdvector",children:[]},{value:"Part 2 - A Grade List using C++ array",id:"part-2---a-grade-list-using-c-array",children:[]},{value:"Part 3 - Gradescope submission",id:"part-3---gradescope-submission",children:[]}]}],p={rightToc:l};function d(e){var t=e.components,n=Object(i.a)(e,r);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and try to finish on your own before our next class meeting. Remember to submit on Gradescope once or more, checking the autograder results. For credit, you must submit by the end of the semester, passing the autograder tests. "))),Object(o.b)("h2",{id:"learning-objectives"},"Learning Objectives"),Object(o.b)("div",{className:"admonition admonition-success alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Objectives")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This exercise will help you gain familiarity with:"),Object(o.b)("ul",{parentName:"div"},Object(o.b)("li",{parentName:"ul"},"C++ classes"),Object(o.b)("li",{parentName:"ul"},"Fields & member functions"),Object(o.b)("li",{parentName:"ul"},"Access modifiers (public & private)"),Object(o.b)("li",{parentName:"ul"},"Dynamic memory allocation in C++"),Object(o.b)("li",{parentName:"ul"},"Alternate constructors"),Object(o.b)("li",{parentName:"ul"},"Destructors")))),Object(o.b)("h3",{id:"part-0---get-the-starter-codes"},"Part 0 - Get the starter codes"),Object(o.b)("p",null,"Get the starter codes from ",Object(o.b)("inlineCode",{parentName:"p"},"cs220-public"),", copy them over to ",Object(o.b)("inlineCode",{parentName:"p"},"cs220")," (remember to create a new directory ",Object(o.b)("inlineCode",{parentName:"p"},"ex14")," for that), and create an initial commit with the copied starter codes.  You should see the following files: ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"main[x].cpp"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"Makefile"),"."),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"If you don't remember how to get the starter codes, go back and check previous exercises for instructions."))),Object(o.b)("h3",{id:"part-1---a-grade-list-using-stdvector"},"Part 1 - A Grade List using ",Object(o.b)("inlineCode",{parentName:"h3"},"std::vector")),Object(o.b)("h4",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"In this part, you will finish the implementation of a grade list class using ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector")," and gain familiarity with C++ classes, fields, member functions, and access modifiers."),Object(o.b)("h4",{id:"instructions"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Read the instructional comments in ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.[cpp|h]")," and ",Object(o.b)("inlineCode",{parentName:"p"},"main1.cpp"),".  It shows an example of how to use the given code for the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class. You can compile and run the code using commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main1"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Follow the instructions in the comments in ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.[cpp|h]"),".  Specifically, the comments will ask you to implement the mean member function by putting a function definition for it in the ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.cpp")," file. You should not change anything in the ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.h")," file.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Follow the instructions in the comments in ",Object(o.b)("inlineCode",{parentName:"p"},"main2.cpp"),".  Specifically, the comments will ask you to fix the code, which does not work as specified.  You may modify the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class but do not change the access modifier (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"private"),") of any of the members. You can compile and run the code using commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main2")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main2"),"."),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Hints")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Think about the best way to access the private variables such that data that should not be changed, cannot be changed by ",Object(o.b)("inlineCode",{parentName:"p"},"main2"),". Also consider the efficiency of your code and whether it is doing unnecessary copying. Discuss possible approaches with your classmates and instructor.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Follow the instructions in the comments in ",Object(o.b)("inlineCode",{parentName:"p"},"main3.cpp"),".  Specifically, the comments will ask you to write some new code using the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class.  You should not need to modify the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class for this part. You can compile and run the code using commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main3")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main3"),"."))),Object(o.b)("h4",{id:"checkpoints"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"How do the modifiers ",Object(o.b)("inlineCode",{parentName:"li"},"public")," and ",Object(o.b)("inlineCode",{parentName:"li"},"private")," affect the data access of the member fields of a C++ class?"),Object(o.b)("li",{parentName:"ol"},"What is the main difference between C++ class member functions and C functions? Do you need to pass the member fields into the member functions as parameters?"),Object(o.b)("li",{parentName:"ol"},"What is a class initializer list? When should you use it?"),Object(o.b)("li",{parentName:"ol"},"Why do we want the member fields to be ",Object(o.b)("inlineCode",{parentName:"li"},"private"),"?")),Object(o.b)("h3",{id:"part-2---a-grade-list-using-c-array"},"Part 2 - A Grade List using C++ array"),Object(o.b)("h4",{id:"introduction-1"},"Introduction"),Object(o.b)("p",null,"In this part, you will finish the implementation of another grade list class. This time, you will use a dynamic array instead of ",Object(o.b)("inlineCode",{parentName:"p"},"std::vector"),". You will practice how to do dynamic memory allocation in C++, and how to write alternate constructors and destructors."),Object(o.b)("h4",{id:"instructions-1"},"Instructions"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Read the instructional comments in ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.[cpp|h]")," and ",Object(o.b)("inlineCode",{parentName:"p"},"main4.cpp"),".  It shows an example of how to use the given code for the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class. ")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Try to compile ",Object(o.b)("inlineCode",{parentName:"p"},"main4.cpp"),".  It doesn\u2019t work because several things are missing from the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class, including the definitions of the constructor, the ",Object(o.b)("inlineCode",{parentName:"p"},"add")," methods, and the ",Object(o.b)("inlineCode",{parentName:"p"},"clear")," method. Follow the instructions in the comments in ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.[cpp|h]")," to write some missing functions for which we have provided headers within the ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.h")," file.  You should not change anything in the ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.h")," file. Try to not reinvent the wheel when writing the ",Object(o.b)("inlineCode",{parentName:"p"},"add")," functions. You can compile and run the code using commands ",Object(o.b)("inlineCode",{parentName:"p"},"make main4")," and ",Object(o.b)("inlineCode",{parentName:"p"},"./main4"),"."),Object(o.b)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The capacity of the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," object should never be less than one. You should check this when implementing the constructor."),Object(o.b)("p",{parentName:"div"},"When calling the constructor, the input parameter specifies the target ",Object(o.b)("inlineCode",{parentName:"p"},"capacity"),", not the number of elements stored in the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," object."),Object(o.b)("p",{parentName:"div"},"When implementing the ",Object(o.b)("inlineCode",{parentName:"p"},"clear")," member function you should end up with a ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," object with zero elements but with a capacity of one.")))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Run ",Object(o.b)("inlineCode",{parentName:"p"},"valgrind")," on ",Object(o.b)("inlineCode",{parentName:"p"},"main4.cpp"),". Add a destructor to the ",Object(o.b)("inlineCode",{parentName:"p"},"GradeList")," class in order to prevent the memory leak. This should free the memory for the array.  If that does not take care of everything, consider whether you wrote the ",Object(o.b)("inlineCode",{parentName:"p"},"clear")," function properly and if the ",Object(o.b)("inlineCode",{parentName:"p"},"add")," function is leaking memory when you resize."))),Object(o.b)("h4",{id:"checkpoints-1"},"Checkpoints"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"What is a class destructor?  When will the destructor be called?"),Object(o.b)("li",{parentName:"ol"},"Can you resize a dynamic array in C++ similar to how you do it in C using ",Object(o.b)("inlineCode",{parentName:"li"},"realloc"),"?"),Object(o.b)("li",{parentName:"ol"},"What happens if you ",Object(o.b)("inlineCode",{parentName:"li"},"delete")," an allocated memory block twice in C++?")),Object(o.b)("h3",{id:"part-3---gradescope-submission"},"Part 3 - Gradescope submission"),Object(o.b)("p",null,"Create a ",Object(o.b)("em",{parentName:"p"},"zip")," file called ",Object(o.b)("inlineCode",{parentName:"p"},"ex14.zip"),", which contains ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_vector.[cpp|h]"),", ",Object(o.b)("inlineCode",{parentName:"p"},"grade_list_array.[cpp|h]")," and ",Object(o.b)("inlineCode",{parentName:"p"},"main[x].cpp")," with your implementation (you don't need to submit the Makefile).  Submit the zip file as ",Object(o.b)("a",{parentName:"p",href:"https://www.gradescope.com/courses/266485/assignments/1353455"},"Day 14 In-class Exercise")," on Gradescope. Make sure your program passes all the autograder tests in order to get full credit. It is due before the next class.  However, late submission is allowed until our last class.  Even so, we highly recommend you to keep up the schedule, finish each in-class exercise, and submit it on Gradescope before the next class."))}d.isMDXComponent=!0}}]);